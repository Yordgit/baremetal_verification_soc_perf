# SPDX-License-Identifier: GPL-2.0

config DEFCONFIG_LIST
	string
	depends on !UML
	option defconfig_list
	default ARCH_DEFCONFIG
	default "arch/$(ARCH)/defconfig"

config CC_IS_GCC
	def_bool $(success,$(CC) --version | head -n 1 | grep -q gcc)

config GCC_VERSION
	int
	default $(shell,$(srctree)/scripts/gcc-version.sh -p $(CC) | sed 's/^0*//') if CC_IS_GCC
	default 0

config CC_IS_CLANG
	def_bool $(success,$(CC) --version | head -n 1 | grep -q clang)

config CLANG_VERSION
	int
	default $(shell,$(srctree)/scripts/clang-version.sh $(CC))

config CC_HAS_ASM_GOTO
	def_bool $(success,$(srctree)/scripts/gcc-goto.sh $(CC))

menu "General setup"

config LOCALVERSION
	string "Local version - append to $(project) release"
	help
	  Append an extra string to the end of your $(project) version.
	  This will show up when you type uname, for example.
	  The string you set here will be appended after the contents of
	  any files with a filename matching localversion* in your
	  object and source tree, in that order.  Your total string can
	  be a maximum of 64 characters.

config LOCALVERSION_AUTO
	bool "Automatically append version information to the version string"
	default y
	depends on !COMPILE_TEST
	help
	  This will try to automatically determine if the current tree is a
	  release tree by looking for git tags that belong to the current
	  top of tree revision.

	  A string of the format -gxxxxxxxx will be added to the localversion
	  if a git-based tree is found.  The string generated by this will be
	  appended after any matching localversion* files, and after the value
	  set in CONFIG_LOCALVERSION.

	  (The actual string used here is the first eight characters produced
	  by running the command:

	    $ git rev-parse --verify HEAD

	  which is done within the script "scripts/setlocalversion".)

choice
	prompt "Compiler optimization level"
	default CC_OPTIMIZE_FOR_PERFORMANCE

config CC_OPTIMIZE_FOR_PERFORMANCE
	bool "Optimize for performance"
	help
	  This is the default optimization level for the $(project), building
	  with the "-O2" compiler flag for best performance and most
	  helpful compile-time warnings.

config CC_OPTIMIZE_FOR_SIZE
	bool "Optimize for size"
	help
	  Enabling this option will pass "-Os" instead of "-O2" to
	  your compiler resulting in a smaller $(project).

	  If unsure, say N.

endchoice

endmenu     # General setup

menu "Hardware setup"

choice
	prompt "Operation platform select"
	default EVB
config EVB
	bool "Run in Evb"

config HAPS
	bool "Run in Haps"
config ZEBU
	bool "Run in Zebu"
endchoice

config APP_BOOT
	bool "Run app boot mode"
	depends on A55
	default y

choice
	prompt "App boot mode launch address"
	default APP_FLASH
	depends on APP_BOOT

config APP_FLASH
	bool "a55 runs at flash 0x0 address"
config APP_JTAG
	bool "a55 runs at JTAG"
config APP_FLASH_SRAM
	bool "a55 relocate to sram"

endchoice

config TEST_BENCH
	bool "compile test bench"
	depends on ZEBU

if TEST_BENCH
source "test_bench/Kconfig"
endif

endmenu

source "arch/Kconfig"
